<script>
var db;  
// This will improve our code to be more readable and shorter  
var indexedDB = window.indexedDB || window.webkitIndexedDB || window.mozIndexedDB || window.msIndexedDB;  
    var request = indexedDB.open("MyTestDatabase");  
    request.onerror = function(event) {  
      alert("Why didn't you allow my web app to use IndexedDB?!");  
    };  
    request.onsuccess = function(event) {  
      db = request.result;  
    };  

  


// This is what our customer data looks like.  
    const customerData = [  
      { ssn: "444-44-4444", name: "Bill", age: 35, email: "bill@company.com" },  
      { ssn: "555-55-5555", name: "Donna", age: 32, email: "donna@home.org" }  
    ];  
    const dbName = "the_name";  



      
    var request = indexedDB.open(dbName, 2);  
      
    request.onerror = function(event) {  
      // Handle errors.  
    };  
    request.onupgradeneeded = function(event) {  
      db = event.target.result;  
      
      // Create an objectStore to hold information about our customers. We're  
      // going to use "ssn" as our key path because it's guaranteed to be  
      // unique.  
      var objectStore = db.createObjectStore("customers", { keyPath: "ssn" });  
      
      // Create an index to search customers by name. We may have duplicates  
      // so we can't use a unique index.  
      objectStore.createIndex("name", "name", { unique: false });  
      
      // Create an index to search customers by email. We want to ensure that  
      // no two customers have the same email, so use a unique index.  
      objectStore.createIndex("email", "email", { unique: true });  
      
      // Store values in the newly created objectStore.  
      for (i in customerData) {  
        objectStore.add(customerData[i]);  
      }  
alert('test');
    };  


function doe() {
var transaction = db.transaction(["customers"], IDBTransaction.READ_WRITE); 

// Do something when all the data is added to the database.  
    transaction.oncomplete = function(event) {  
      alert("All done!");  
    };  
      
    transaction.onerror = function(event) {  
      // Don't forget to handle errors!  
    };  
      
    var objectStore = transaction.objectStore("customers");  
    for (var i in customerData) {  
      var request = objectStore.add(customerData[i]);  
      request.onsuccess = function(event) {  
        // event.target.result == customerData[i].ssn  
      };  
    }  
}
setTimeout(doe, 1000);
</script>
